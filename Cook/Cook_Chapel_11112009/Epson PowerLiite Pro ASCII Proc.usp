/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME " Epson PowerLite Pro ASCII Processor"
// #HINT ""
#DEFINE_CONSTANT	ciQUEUESIZE		20
// #CATEGORY "" 
#CATEGORY "24" // TV/Video Projector
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	initialize, power_on, power_off, power_toggle;
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT	from_module$[150], from_device$[250];

DIGITAL_OUTPUT	power_on_fb, power_off_fb, ready, warming_up;
ANALOG_OUTPUT	lamp_hours, brightness_fb, contrast_fb, color_fb, tint_fb, sharpness_fb;
STRING_OUTPUT	to_module$, to_device$;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iPowerRequestSent, iReady, iNextSend, iNextStore, iPower,
				iFlag1, iFlag2, iLamp, iBright, iContrast, iColor, iTint, iSharp;
STRING	sQueue[ciQUEUESIZE][20], sTemp[20], sTemp1[20];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fTimeOut(INTEGER fTime)
{
	wait(fTime, wTimeOut)
	{
		if(iPowerRequestSent = 1)
		{
			iPowerRequestSent = 0;
			warming_up = 0;
			power_on_fb = 0;
			power_off_fb = 1;
			iReady = 1;
			ready = iReady;
			iPower = 0;
		}
		else
		{
			iReady = 1;
			ready = iReady;
		}			
	}
}

FUNCTION fSendNewCommand(string fsCommand)
{
	to_device$ = fsCommand;
	if(fsCommand = "PWR?\x0D")
	{
		iPowerRequestSent = 1;
		call fTimeOut(500);
	}
	else if(fsCommand = "PWR OFF\x0D")
	{
		call fTimeOut(500);
	}
	else if(fsCommand = "PWR ON\x0D")
	{
		call fTimeOut(4000);
	}
	else
	{
		call fTimeOut(500);
	}
	iReady = 0;
	ready = iReady;
}

FUNCTION fSendStoredCommand(string fsCommand)
{
	to_device$ = fsCommand;
	if(fsCommand = "PWR?\x0D")
	{
		iPowerRequestSent = 1;
		call fTimeOut(500);
	}
	else if(fsCommand = "PWR OFF\x0D")
	{
		call fTimeOut(500);
	}
	else if(fsCommand = "PWR ON\x0D")
	{
		call fTimeOut(4000);
	}
	else
	{
		call fTimeOut(500);
	}
	sQueue[iNextSend] = "";
	iReady = 0;
	ready = iReady;
	iNextSend = iNextSend + 1;
	if(iNextSend > ciQUEUESIZE)
	{
		iNextSend = 1;
	}
}

FUNCTION	fStoreCommand(STRING fsCommand)
{
	sQueue[iNextStore] = fsCommand;
	iNextStore = iNextStore + 1;
	if(iNextStore > ciQUEUESIZE)
	{
		iNextStore = 1;
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH initialize
{
	warming_up = 0;
	power_on_fb = 0;
	power_off_fb = 0;
	iPower = 0;
	call fSendNewCommand("PWR?\x0D");
}

PUSH power_on
{
	if(iReady = 1)
	{
		call fSendNewCommand("PWR ON\x0D");
		call fStoreCommand("PWR?\x0D");
	}
	else
	{
		call fStoreCommand("PWR ON\x0D");
		call fStoreCommand("PWR?\x0D");
	}
}

PUSH power_off
{
	if(iReady = 1)
	{
		call fSendNewCommand("PWR OFF\x0D");
		call fStoreCommand("PWR?\x0D");
	}
	else
	{
		call fStoreCommand("PWR OFF\x0D");
		call fStoreCommand("PWR?\x0D");
	}
}

PUSH power_toggle
{
	if(power_off_fb = 1)
	{
		if(iReady = 1)
		{
			call fSendNewCommand("PWR ON\x0D");
			call fStoreCommand("PWR?\x0D");
		}
		else
		{
			call fStoreCommand("PWR ON\x0D");
			call fStoreCommand("PWR?\x0D");
		}
	}
	else if((power_on_fb = 1) || (warming_up = 1))
	{
		if(iReady = 1)
		{
			call fSendNewCommand("PWR OFF\x0D");
			call fStoreCommand("PWR?\x0D");
		}
		else
		{
			call fStoreCommand("PWR OFF\x0D");
			call fStoreCommand("PWR?\x0D");
		}
	}
}

CHANGE from_device$
{
	if(iFlag1 = 0)
	{
		iFlag1 = 1;
		while(find(":", from_device$) > 0)
		{
			cancelwait(wTimeOut);
			sTemp = remove(":", from_device$);
			if(byte(sTemp, 1) = 0x3A)	//This is the colon.
			{
				iReady = 1;
			}
			else
			{
				if(find("PWR=", sTemp) > 0)
				{
					iPower = atoi(sTemp);
					iPowerRequestSent = 0;
					iReady = 1;
					if(iPower = 1)
					{
						warming_up = 0;
						power_off_fb = 0;
						power_on_fb = 1;
					}
					else if(iPower = 2)
					{
						power_on_fb = 0;
						power_off_fb = 0;
						warming_up = 1;
					}
					else
					{
						warming_up = 0;
						power_on_fb = 0;
						power_off_fb = 1;
					}
				}
				else if(find("LAMP=", sTemp) > 0)
				{
					iLamp = atoi(sTemp);
					lamp_hours = iLamp;
					iReady = 1;
				}
				else if(find("BRIGHT=", sTemp) > 0)
				{
					iBright = atoi(sTemp);
					brightness_fb = iBright;
					iReady = 1;
				}
				else if(find("CONTRAST=", sTemp) > 0)
				{
					iContrast = atoi(sTemp);
					contrast_fb = iContrast;
					iReady = 1;
				}
				else if(find("DENSITY=", sTemp) > 0)
				{
					iColor = atoi(sTemp);
					color_fb = iColor;
					iReady = 1;
				}
				else if(find("TINT=", sTemp) > 0)
				{
					iTint = atoi(sTemp);
					tint_fb = iTint;
					iReady = 1;
				}
				else if(find("SHARP=", sTemp) > 0)
				{
					iSharp = atoi(sTemp);
					sharpness_fb = iSharp;
					iReady = 1;
				}
				else
				{
					to_module$ = sTemp;
					iReady = 1;
				}
			}
			if(iReady = 1)
			{
				if(iNextStore <> iNextSend)
				{
					call fSendStoredCommand(sQueue[iNextSend]);
				}
				else
				{
					ready = iReady;
				}
			}
		}
		iFlag1 = 0;
	}
}

CHANGE from_module$
{
	if(iFlag2 = 0)
	{
		iFlag2 = 1;
		while(find("\x0D", from_module$) > 0)
		{
			sTemp1 = remove("\x0D", from_module$);
			if((iPower = 0) && (sTemp = "PWR ON\x0D") && (iReady = 1))
			{
				call fSendNewCommand(sTemp1);
			}
			else if((iPower = 0) && (sTemp <> "PWR ON\x0D"))
			{
				call fStoreCommand(sTemp1);
			}
			else if(iReady = 0)
			{
				call fStoreCommand(sTemp1);
			}
			else if(iNextStore <> iNextSend)
			{
				call fStoreCommand(sTemp1);
			}
			else if(iReady = 1)
			{
				call fSendNewCommand(sTemp1);
			}
			else
			{
				call fStoreCommand(sTemp1);
			}
			sTemp1 = "";
		}
		iFlag2 = 0;
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	iPowerRequestSent = 0;
	iReady = 1;
	ready = iReady;
	iNextSend = 1;
	iNextStore = 1;
	iPower = 0;
	iFlag1 = 0;
	iFlag2 = 0;
	warming_up = 0;
	power_on_fb = 0;
	power_off_fb = 1;
	setarray(sQueue, "");
}
