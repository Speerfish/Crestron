/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Amazon Cover Art Search Interface v2.0"
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0

#DEFINE_CONSTANT MAX_DATA_LEN 100
#DEFINE_CONSTANT MAX_WORDS 10

// *** TCP Status Flags
#DEFINE_CONSTANT TCP_NOT_CONNECTED 								0
#DEFINE_CONSTANT TCP_WAITING_FOR_CONNECTION 			1
#DEFINE_CONSTANT TCP_CONNECTED 										2
#DEFINE_CONSTANT TCP_CONNECTION_FAILED			 			3
#DEFINE_CONSTANT TCP_CONNECTION_BROKEN_REMOTELY		4
#DEFINE_CONSTANT TCP_CONNECTION_BROKEN_LOCALLY		5
#DEFINE_CONSTANT TCP_PERFORMING_DNS_LOOKUP				6
#DEFINE_CONSTANT TCP_DNS_LOOKUP_FAILED						7

#DEFINE_CONSTANT HTTP_HEADER "GET /onca/xml?Service=AWSECommerceService&AWSAccessKeyId="
#DEFINE_CONSTANT HTTP_MIDDLE1 "&Operation=ItemSearch&SearchIndex=Music"
#DEFINE_CONSTANT HTTP_MIDDLE2 "&Artist="
#DEFINE_CONSTANT HTTP_MIDDLE3 "&Title="
#DEFINE_CONSTANT HTTP_FOOTER1 "&ResponseGroup=Images"
#DEFINE_CONSTANT HTTP_FOOTER2 " HTTP/1.1\n"
#DEFINE_CONSTANT HTTP_FOOTER3 "Host: "
#DEFINE_CONSTANT HTTP_FOOTER4 "\n\n"

#DEFINE_CONSTANT SMALL 		1
#DEFINE_CONSTANT MEDIUM 	2
#DEFINE_CONSTANT LARGE 		3


 
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
  This module uses Amazon's XML database to retrieve an HREF link
  to an album art image. In order to use this module, you must provide
  an HTTP subscription ID as well as a host name. The subscription ID
  is obtained by registering with Amazon at:
  
  http://www.amazon.com/gp/browse.html/104-9153122-0463161?%5Fencoding=UTF8&node=3435361
  
  Note: Since multiple album names can exist for any given artist,
  the art that is returned may not be the exact cover desired.
  
  
  Crestron Electronics, Inc. is not responsible for the use of the album
  art image. Please refer to the Amazon license agreement for information
  regarding content use from their website.
  
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Search_Timeout;
							 
ANALOG_INPUT TCP_Status;
 
STRING_INPUT Subscript_ID[30],
             Host_Name[50],
             Artist_Name[MAX_DATA_LEN],
					   Album_Title[MAX_DATA_LEN];
					    
BUFFER_INPUT TCP_RX[2000]; 

DIGITAL_OUTPUT Search_Busy,
							 TCP_Connect,
							 Restart_Counter,
							 Image_Found,
							 No_Image_Found,
							 Data_Missing,
							 Data_Same_As_Previous,
               Search_Error;
							  
// ANALOG_OUTPUT 
STRING_OUTPUT Status,
						  TCP_TX,
              Best_HREF,
						  Small_HREF,
						  Medium_HREF,
						  Large_HREF; 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER bRXOK, bSearchBusy;

STRING sArtistName[MAX_DATA_LEN], sAlbumTitle[MAX_DATA_LEN], sTemp[2000];
STRING sLastArtistName[MAX_DATA_LEN], sLastAlbumTitle[MAX_DATA_LEN];


INTEGER bFoundImage, bFoundSmall, bFoundMedium, bFoundLarge;
INTEGER bURLSmall, bURLMedium, bURLLarge;

INTEGER bMatchLastArtist, bMatchLastAlbum, bNoArtist, bNoAlbum;

STRING sLargeHREF[255], sMediumHREF[255], sSmallHREF[255];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResetConnection()
{
	if (bFoundLarge)
   Best_HREF = sLargeHREF;
  else if (bFoundMedium)
   Best_HREF = sMediumHREF;
  else if (bFoundSmall)
   Best_HREF = sSmallHREF;
  
  TCP_Connect = FALSE;
	bSearchBusy = FALSE;
	Search_Busy = FALSE;

	bFoundImage = FALSE;
  bFoundSmall = FALSE;
	bFoundMedium = FALSE;
	bFoundLarge = FALSE;
						
	bURLSmall = FALSE;
	bURLMedium = FALSE;
	bURLLarge = FALSE;
	
	TCP_RX = "";
}

Function SendSearchString()
{
    string sSearchString[1000], sTemp[255];
    integer iLen;
    
    sSearchString = ""; 
    iLen = 0;
    
    makestring (sSearchString, "%s%s%s%s%s%s%s%s%s%s%s%s", HTTP_HEADER, Subscript_ID, HTTP_MIDDLE1,
     HTTP_MIDDLE2, sArtistName, HTTP_MIDDLE3, sAlbumTitle, HTTP_FOOTER1, HTTP_FOOTER2, HTTP_FOOTER3,
     Host_Name, HTTP_FOOTER4);
    
    
    iLen = len(sSearchString);
     
    if (iLen > 250)
    {
      // send the first chunk
      sTemp = left (sSearchString, 250);
      print ("%s\n", sTemp);
      TCP_TX = sTemp;
      
      // send the second chunk
      sTemp = right (sSearchString, iLen - 250);
      print ("%s\n", sTemp);
      TCP_TX = sTemp;
    }
    else
    {       
      TCP_TX = sSearchString;
    }
}

Function ProcessData(integer Type, string Data)
{
	switch (Type)
	{
		case(SMALL):
		{
			if (find("http://", Data))
			{
				sSmallHREF = left(Data, len(Data) - 6);
        Small_HREF = sSmallHREF;
         
				pulse (10, Image_Found);	
			}
		}
		case(MEDIUM):
		{
			if (find("http://", Data))
			{
				sMediumHREF = left(Data, len(Data) - 6);
        Medium_HREF = sMediumHREF;
				
        pulse (10, Image_Found);	
			}
		}
		case(LARGE):
		{
			if (find("http://", Data))
			{
				sLargeHREF = left(Data, len(Data) - 6);
        Large_HREF = sLargeHREF;
        
				pulse (10, Image_Found); 	
			}
		}
	}	
}

Function ParseAlbumTitle(string Data)
{
	string sTemp[MAX_DATA_LEN];
	
	sAlbumTitle = "";
	
	if (find(" ", Data)) //there is more than one word
	{
		//replace the space with "%20"
    do
		{
			
    	sTemp = remove(" ", Data); //remove the data with the space
    	sTemp = left(sTemp, len(sTemp) - 1); //remove the space
    	
    	sAlbumTitle = sAlbumTitle + sTemp + "%20";
			
		} until(!find(" ", Data));
		
		//add the last word
		sAlbumTitle = sAlbumTitle + Data;
	}
	else
	{
		sAlbumTitle = Data; 
	}
	
	TCP_Connect = TRUE;	

}

Function ParseArtistName(string Data)
{
	string sTemp[MAX_DATA_LEN];
	
	sArtistName = "";
	
	if (find(" ", Data)) //there is more than one word
	{
		//replace the space with "%20"
    do
		{
    	sTemp = remove(" ", Data); //remove the data with the space
    	sTemp = left(sTemp, len(sTemp) - 1); //remove the space
    	
    	sArtistName = sArtistName + sTemp + "%20";
			
		} until(!find(" ", Data));
		
		//add the last word
		sArtistName = sArtistName + Data;
	}
	else
	{
		sArtistName = Data; 
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/



PUSH Search_Timeout
{
	call ResetConnection();
}

CHANGE Artist_Name
{
	string sTemp[MAX_DATA_LEN];
	sTemp = Artist_Name;
	
	if (len(sTemp) > 0)
	{
		bNoArtist = FALSE;
		
		if (sLastArtistName <> Artist_Name)
		{
			bMatchLastArtist = FALSE;
			
			sLastArtistName = Artist_Name;
			
			if (bSearchBusy)
			{
				call ResetConnection();			
			}
		
			call ParseArtistName(sTemp);
		}
		else
		{
			bMatchLastArtist = TRUE;
		}
	}
	else
	{
		bNoArtist = TRUE;
	}
}

CHANGE Album_Title
{
	string sTemp[MAX_DATA_LEN];
	sTemp = Album_Title;

	if (len(sTemp) > 0)
	{
		bNoAlbum = FALSE;
		
		if (sLastAlbumTitle <> Album_Title) //this is a new ablum title
		{
			bMatchLastAlbum = FALSE;
			
			sLastAlbumTitle = Album_Title;
			  
			if (bSearchBusy) //if we are already searching, stop
			{
				call ResetConnection();
			}
	
			bSearchBusy = TRUE;
			Search_Busy = TRUE;

			bFoundImage = FALSE;
      bFoundSmall = FALSE;
			bFoundMedium = FALSE;
			bFoundLarge = FALSE;
						
			bURLSmall = FALSE;
			bURLMedium = FALSE;
			bURLLarge = FALSE;		
		
			call ParseAlbumTitle(sTemp);
		}
		else //matched last album title
		{
			bMatchLastAlbum = TRUE;
		}
	}
	else
	{
		bNoAlbum = TRUE;
	}
	
	if (bNoArtist || bNoAlbum)
	 pulse (10, Data_Missing);
	else
	{ 
		if (bMatchLastArtist && bMatchLastAlbum)
	 	 pulse (10, Data_Same_As_Previous); 
	}
}

CHANGE TCP_Status
{
	switch (TCP_STATUS)
	{
		case(TCP_NOT_CONNECTED):
		{
		}
		case(TCP_WAITING_FOR_CONNECTION):
		{
		}
		case(TCP_CONNECTED):
		{
			call SendSearchString();	
		}
		case(TCP_CONNECTION_FAILED):
		{
			call ResetConnection();
		}
		case(TCP_CONNECTION_BROKEN_REMOTELY):
		{       
      call ResetConnection();		
		}
		case(TCP_CONNECTION_BROKEN_LOCALLY):
		{       
      call ResetConnection();		
		}
		case(TCP_PERFORMING_DNS_LOOKUP):
		{
		}
		case(TCP_DNS_LOOKUP_FAILED):
		{
			call ResetConnection();
		}
	}
}

CHANGE TCP_RX
{
	if (bRXOK)
	{
		bRXOK = FALSE;
		
		while(find(">", TCP_RX)) //use ">" as delim
		{			
			sTemp = remove(">", TCP_RX);
			
      if (find("Bad Request", sTemp))
      {
        call ResetConnection();
        pulse (10, Search_Error); 
      }
      else if (find("Errors", sTemp))
      {
        call ResetConnection();
        pulse (10, Search_Error);        
      }
      else if (find("</ItemSearchResponse>", sTemp))
      {        
        call ResetConnection();
      }
      else
      {
      
			  if (bURLSmall && !bFoundSmall) //data is for small image
			  {
				  call ProcessData(SMALL, sTemp);
			  }
			  else if (bURLMedium && !bFoundMedium) //data is for medium image
				{
					call ProcessData(MEDIUM, sTemp);
				}
				else if (bURLLarge && !bFoundLarge) //data is for large image
				{
					call ProcessData(LARGE, sTemp);
				}
				
				if (find("<SmallImage>", sTemp)) //found small image start tag
				{
					bURLSmall = TRUE;
				}
				else if (find("</SmallImage>", sTemp)) //found small image end tag
				{
					bFoundImage = TRUE;
          bFoundSmall = TRUE;
					bURLSmall = FALSE;
				}
				else if (find("<MediumImage>", sTemp)) //found medium image start tag
				{
					bURLMedium = TRUE;
				}
				else if (find("</MediumImage>", sTemp)) //found medium image end tag
				{
					bFoundImage = TRUE;
          bFoundMedium = TRUE;
					bURLMedium = FALSE;
				}
				else if (find("<LargeImage>", sTemp)) //found large image start tag
				{
					bURLLarge = TRUE;
				}
				else if (find("</LargeImage>", sTemp)) //found large image end tag
				{
					bFoundImage = TRUE;
          bFoundLarge = TRUE;
					bURLLarge = FALSE;
				}
				else if (find("NoExactMatches", sTemp)) //on images found
				{
					pulse (10, No_Image_Found);	
				}
		  }
    }
		
		bRXOK = TRUE;
	}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	bRXOK = TRUE;
}


