/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE   1
#DEFINE_CONSTANT FALSE  0

#DEFINE_CONSTANT cHOOK_STATUS    1
#DEFINE_CONSTANT cMUTE_STATUS    2
#DEFINE_CONSTANT cVERSION        3
#DEFINE_CONSTANT cCALL_DURATION  4

// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Dial; 

ANALOG_INPUT Keypad_Value;
 
STRING_INPUT Device_Type$[2],
             Number$[44];
              
BUFFER_INPUT RX$[255]; 

//DIGITAL_OUTPUT 
ANALOG_OUTPUT Hook_Status,
              Mute_Rec_Out_Status,
              Mute_Line_Out_Status,
              Mute_Spkr_Out_Status,
              Mute_RX_Status,
              Privacy_Status,
              Call_Duration;
               
STRING_OUTPUT Version$,
              Call_Duration$,
              TX$; 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK;
STRING g_sTempData[255], g_sPrefix[3];
STRING g_sCommand[10][10];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SetCommands()
{
  g_sCommand[cHOOK_STATUS] = g_sPrefix + " " + "TE 1";
  g_sCommand[cMUTE_STATUS] = g_sPrefix + " " + "MUTE";
  g_sCommand[cVERSION] = g_sPrefix + " " + "VER";
  g_sCommand[cCALL_DURATION] = g_sPrefix + " " + "CALLDUR";
}

Integer_Function CallDuration(string Data)
{
  integer iHours, iMinutes, iSeconds, iTotalSeconds;
  string sTrash[3];
    
  iTotalSeconds = 0;
  
  sTrash = remove(":", Data); //remove hours
  iHours = atoi(sTrash);
  
  sTrash = remove(":", Data); //remove minutes
  iMinutes = atoi(sTrash);
  
  iSeconds = atoi(Data);
  
  iTotalSeconds = ((iHours * 60) * 60) + (iMinutes * 60) + iSeconds;
  
  return (iTotalSeconds);
  
}

Function ProcessData(string Data)
{
  string sNewData[25], sTrash[10], sTempData[8];
  
  //remove <CR><LF>
  sNewData = left(Data, len(Data) - 2);


  
  if (find(g_sCommand[cHOOK_STATUS], sNewData))
  {
    sTrash = remove("TE 1 ", sNewData);
    Hook_Status = atoi(sNewData);
  }
  else if (find(g_sCommand[cVERSION], sNewData))
  {
    sTrash = remove("VER ", sNewData);
    Version$ = sNewData; 
  }
  else if (find(g_sCommand[cMUTE_STATUS], sNewData))
  {
    if (find("MUTE 1 O", sNewData)) //record out
    {
      sTrash = remove("MUTE 1 O", sNewData);
      Mute_Rec_Out_Status = atoi(sNewData);
    }
    else if (find("MUTE 2 O", sNewData)) //line out
    {
      sTrash = remove("MUTE 2 O", sNewData);
      Mute_Line_Out_Status = atoi(sNewData);
    }
    else if (find("MUTE 3 O", sNewData)) //speaker out
    {
      sTrash = remove("MUTE 3 O", sNewData);
      Mute_Spkr_Out_Status = atoi(sNewData);
    }
    else if (find("MUTE 1 R", sNewData))
    {
      sTrash = remove("MUTE 1 R", sNewData);
      Mute_RX_Status = atoi(sNewData);
    }
    else if (find("MUTE 1 T", sNewData))
    {
      sTrash = remove("MUTE 1 T", sNewData);
      Privacy_Status = atoi(sNewData);
    }
  }
  else if (find(g_sCommand[cCALL_DURATION], sNewData))
  {
    sTrash = remove("CALLDUR 1 ", sNewData);
    sTempData = sNewData;
    
    Call_Duration$ = sTempData;
    
    Call_Duration = CallDuration(sTempData);
  }  
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

//dial automatically
PUSH Dial
{
  if (len(Number$) > 0)
  {
    //check hook status
    TX$ = g_sPrefix + " TE 1\r";
    
    wait (100)
    {
      if (Hook_Status = 0) //we are not in a call
       TX$ = g_sPrefix + " DIAL 1 " + Number$ + "\r";
    }
  }
}

//dial manually
CHANGE Keypad_Value
{
  if (Hook_Status = 1)
   TX$ = g_sPrefix + " DIAL 1 " + chr(Keypad_Value) + "\r";
}

CHANGE Device_Type$
{
  if (Device_Type$ = "42")
  {
    g_sPrefix = "#B0";
  }
  else if (Device_Type$ = "43")
  {
    g_sPrefix = "#C0";  
  }
  
  call SetCommands();  
}

CHANGE RX$
{
  if (g_bRXOK)
  {
    g_bRXOK = FALSE;
    
    while (find("\n", RX$))
    {
      g_sTempData = remove("\n", RX$);
      
      if (len(g_sTempData) > 2 && find(g_sPrefix, g_sTempData))
       call ProcessData(g_sTempData);
    }
    
    g_bRXOK = TRUE;
  }
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
  g_bRXOK = TRUE;
}


