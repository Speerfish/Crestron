/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Go,_SKIP_;
DIGITAL_INPUT Heat,Cool,HC_Off,_SKIP_;
DIGITAL_INPUT Fan_On,Fan_Auto,_SKIP_;
ANALOG_INPUT Heat_Point,Cool_Point,_SKIP_;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT _SKIP_,_SKIP_;
DIGITAL_OUTPUT Heat_FB,Cool_FB,Off_FB,_SKIP_;
DIGITAL_OUTPUT Fan_On_FB,Fan_Auto_FB,_SKIP_;
ANALOG_OUTPUT Mode,Fan,Point,_SKIP_;
// STRING_OUTPUT 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER ModeNum,FanNum,HeatPointNum,CoolPointNum;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Go
{
	Mode = ModeNum;
	Fan = FanNum;
	If(ModeNum = 1)
	{
		Point = HeatPointNum;
	}
	If(ModeNum = 2)
	{
		Point = CoolPointNum;
	}
}
PUSH Heat
{
	ModeNum = 1;
	
	Heat_FB = 1;
	Cool_FB = 0;
	Off_FB = 0;
}
PUSH Cool
{
	ModeNum = 2;
	
	Heat_FB = 0;
	Cool_FB = 1;
	Off_FB = 0;

}
PUSH HC_Off
{
	ModeNum = 0;
	
	Heat_FB = 0;
	Cool_FB = 0;
	Off_FB = 1;

}
PUSH Fan_On
{
	FanNum = 1;
	
	Fan_On_FB = 1;
	Fan_Auto_FB = 0;
}
PUSH Fan_Auto
{
	FanNum = 0;
	
	Fan_On_FB = 0;
	Fan_Auto_FB = 1;
}
CHANGE Heat_Point
{
	HeatPointNum = Heat_Point;
}
CHANGE Cool_Point
{
	CoolPointNum = Cool_Point;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

