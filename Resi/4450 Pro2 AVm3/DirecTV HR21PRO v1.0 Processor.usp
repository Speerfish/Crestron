/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "DirecTV HR21PRO v1.0 Processor"
// #HINT ""
#DEFINE_CONSTANT	Poll_Clear				0
#DEFINE_CONSTANT	Poll_Primary_Status	1
#DEFINE_CONSTANT	Poll_Current_Time 	2
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Get_Primary_Status, Get_Current_Time; 
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT From_Device[100];

// DIGITAL_OUTPUT 
ANALOG_OUTPUT Transponder, Signal_Quality;
STRING_OUTPUT Channel, Primary_Type, Audio_Type, Current_Date, Current_Time, Day_Of_Week, To_Device; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER aSemaphore, a, aPoll, aByte[50];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING sTemp[50];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function GetBytes()
{
	sTemp = From_Device;
	for(a = 2 to (len(sTemp) - 1))
	{
		aByte[a - 1] = byte(sTemp, a);
	}
}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Get_Primary_Status
{
	To_Device = "\xFA\x83";
	aPoll = Poll_Primary_Status;
	clearbuffer(From_Device);
}

PUSH Get_Current_Time
{
	To_Device = "\xFA\x91";
	aPoll = Poll_Current_Time;
	clearbuffer(From_Device);
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE From_Device
{
//	print("Received.\n");
	if(aSemaphore = 0)
	{
		aSemaphore = 1;
		while(find("\xF4", From_Device) > 0)
		{
//			print("Found delimeter at %d.\n", find("\xF4", From_Device));
			if((find("\xF4", From_Device) = 47) && aPoll = Poll_Primary_Status)	//	If GetPrimaryStatus response received
			{
//				print("GetPrimaryStatus response.\n");
				call GetBytes();
//				makestring(Channel, "%d%d",(aByte[1] << 8) + aByte[2], (aByte[3] << 8) + aByte[4]); // n-n format
				makestring(Channel, "%d",(aByte[1] << 8) + aByte[2]);	// n format
				switch(aByte[5])
				{
					case(0x0B):
						Primary_Type = "Data";
					case(0x0C):
						Primary_Type = "Audio";
					case(0x0E):
						Primary_Type = "Retired";
					case(0x0F):
						Primary_Type = "TV";
					case(0x10):
						Primary_Type = "HDTV";
					case(0xFF):
						Primary_Type = "None";
				}					
				switch(aByte[6])
				{
					case(0x00):
						Audio_Type = "MPEG IN/PCM Out";
					case(0x09):
						Audio_Type = "AC3 In/AC3 Out";
					case(0xFF):
						Audio_Type = "None";
				}
				Transponder = aByte[16];
				Signal_Quality = aByte[39];
			}
			if((find("\xF4", From_Device) = 9) && aPoll = Poll_Current_Time)	//	If GetCurrentTime response received
			{
//				print("GetCurrentTime response.\n");
				call GetBytes();
				makestring(Current_Date, "%02d/%02d/%d", aByte[2], aByte[3], aByte[1] + 1993);
				makestring(Current_Time, "%02d:%02d", aByte[4], aByte[5]);
				switch(aByte[7])
				{
					case(0x01):
						Day_Of_Week = "Monday";
					case(0x02):
						Day_Of_Week = "Tuesday";
					case(0x03):
						Day_Of_Week = "Wednesday";
					case(0x04):
						Day_Of_Week = "Thursday";
					case(0x05):
						Day_Of_Week = "Friday";
					case(0x06):
						Day_Of_Week = "Saturday";
					case(0x07):
						Day_Of_Week = "Sunday";
				}
			}
			else
				clearbuffer(From_Device);
			aPoll = Poll_Clear;
		}
		aSemaphore = 0;
	}
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	aSemaphore = 0;
	aPoll = Poll_Clear;
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


