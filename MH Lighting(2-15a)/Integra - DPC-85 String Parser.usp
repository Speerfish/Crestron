/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: MediaLogix
System Name: Integra - DVD FB
System Number:
Programmer: Sean Klein
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "46" "Integra DPC-85" // Custom
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT Rx$[100];

DIGITAL_OUTPUT Power_On,Power_Off,_SKIP_;
DIGITAL_OUTPUT Play,Stop,Pause,_SKIP_;
DIGITAL_OUTPUT Dim_Bright,Dim_Middle,Dim_Dark,_SKIP_;
DIGITAL_OUTPUT Disc_1,Disc_2,Disc_3,Disc_4,Disc_5,Disc_6,_SKIP_;
DIGITAL_OUTPUT Video_Out_On,Video_Out_Off,_SKIP_;
ANALOG_OUTPUT Title,Total_Titles,_SKIP_;
ANALOG_OUTPUT Track,Total_Tracks,_SKIP_;
ANALOG_OUTPUT Elapsed,_SKIP_;
// STRING_OUTPUT 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE Rx$
{
	String Trash[50],CMD[50],Type[3],Code[5],T1[3],TT[3];
	
	If(Find("\x1A",Rx$))
	{
		CMD = Remove("\x1A",Rx$);
		
		// Remove the first 2 non-used characters if they are correct
		If(Left(CMD,1) = "!")
		{
			Trash = Remove(Left(CMD,1),CMD);
		}
		If(Left(CMD,1) = "2")
		{
			Trash = Remove(Left(CMD,1),CMD);
		}
		
		
		// Find the type of feedback string
		Type = Remove(Left(CMD,3),CMD);
		Code = Remove(Left(CMD,10),CMD);
		
		// Type - Power Feedback
		If(Type = "PWR")
		{
			If(Left(Code,2) = "00")
			{
				Power_On = 0;
				Power_Off = 1;
			}
			If(Left(Code,2) = "01")
			{
				Power_On = 1;
				Power_Off = 0;
			}
		}
		// Type - Dimmer Feedback
		If(Type = "DIM")
		{
			If(Left(Code,2) = "00")
			{
				Dim_Bright = 1;
				Dim_Middle = 0;
				Dim_Dark = 0;
			}
			If(Left(Code,2) = "01")
			{
				Dim_Bright = 0;
				Dim_Middle = 1;
				Dim_Dark = 0;
			}
			If(Left(Code,2) = "02")
			{
				Dim_Bright = 0;
				Dim_Middle = 0;
				Dim_Dark = 1;
			}
		}
		// Type - Disc Feedback
		If(Type = "DSC")
		{
			If(Left(Code,2) = "00")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "01")
			{
				Disc_1 = 1;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "02")
			{
				Disc_1 = 0;
				Disc_2 = 1;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "03")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 1;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "04")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 1;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "05")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 1;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "06")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 1;
			}
		}
		// Type - Video Out Feedback
		If(Type = "VOT")
		{
			If(Left(Code,2) = "ON")
			{
				Video_Out_On = 1;
				Video_Out_Off = 0;
			}			
			If(Left(Code,2) = "OF")
			{
				Video_Out_On = 0;
				Video_Out_Off = 1;
			}			
		}
		// Type - Status Mode Notice
		If(Type = "SPM")
		{
			
		}
		// Type - Action Status Notice
		If(Type = "SST")
		{
			If(Left(Code,2) = "00")
			{
				Play = 0;
				Stop = 1;
				Pause = 0;
			}
			If(Left(Code,2) = "01")
			{
				Play = 1;
				Stop = 0;
				Pause = 0;
			}
			If(Left(Code,2) = "02")
			{
				Play = 0;
				Stop = 0;
				Pause = 1;
			}
			If(Left(Code,2) = "03")
			{
				Play = 0;
				Stop = 1;
				Pause = 0;
			}
		}
		// Type - Disc Status Notice
		If(Type = "CDS")
		{
			If(Left(Code,2) = "00")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "01")
			{
				Disc_1 = 1;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "02")
			{
				Disc_1 = 0;
				Disc_2 = 1;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "03")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 1;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "04")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 1;
				Disc_5 = 0;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "05")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 1;
				Disc_6 = 0;
			}
			If(Left(Code,2) = "06")
			{
				Disc_1 = 0;
				Disc_2 = 0;
				Disc_3 = 0;
				Disc_4 = 0;
				Disc_5 = 0;
				Disc_6 = 1;
			}
		}
		// Type - Dimmer Status Notice
		If(Type = "MST")
		{
			If(Left(Code,2) = "00")
			{
				Dim_Bright = 1;
				Dim_Middle = 0;
				Dim_Dark = 0;
			}
			If(Left(Code,2) = "01")
			{
				Dim_Bright = 0;
				Dim_Middle = 1;
				Dim_Dark = 0;
			}
			If(Left(Code,2) = "02")
			{
				Dim_Bright = 0;
				Dim_Middle = 0;
				Dim_Dark = 1;
			}
		}
		// Type - Video Out Feedback
		If(Type = "VST")
		{
			If(Left(Code,2) = "01")
			{
				Video_Out_On = 1;
				Video_Out_Off = 0;
			}			
			If(Left(Code,2) = "00")
			{
				Video_Out_On = 0;
				Video_Out_Off = 1;
			}			
		}
		// Type - Title/Group/Folder Status
		If(Type = "STG")
		{
			T1 = Remove(Left(Code,3),Code);
			TT = Remove(Left(Code,3),Code);
			
			Title = ATOI(T1);
			Total_Titles = ATOI(TT);
		}
		// Type - Chapter/Track Status
		If(Type = "STC")
		{
			T1 = Remove(Left(Code,3),Code);
			TT = Remove(Left(Code,3),Code);
			
			Track = ATOI(T1);
			Total_Tracks = ATOI(TT);
		}
		// Type - Title/Group/Folder Status
		If(Type = "SET")
		{
			T1 = Remove(Left(Code,5),Code);
			
			Elapsed = ATOI(T1);
		}
		
	}
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

