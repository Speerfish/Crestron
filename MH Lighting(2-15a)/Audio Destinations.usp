/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "34" // Mixer
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT LG_MPS,LG_DVD,LG_CD,LG_Sat;
DIGITAL_INPUT LB_MPS,LB_DVD,LB_CD,LB_Sat;
DIGITAL_INPUT SR_MPS,SR_DVD,SR_CD,SR_Sat;
DIGITAL_INPUT LG_Power_Off,LB_Power_Off,SR_Power_Off,_SKIP_;
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
ANALOG_OUTPUT MPS_1,MPS_2,MPS_3,_SKIP_;
ANALOG_OUTPUT CD_1,CD_2,CD_3,_SKIP_;
ANALOG_OUTPUT DVD_1,DVD_2,DVD_3,_SKIP_;
ANALOG_OUTPUT Sat_1,Sat_2,Sat_3,_SKIP_;
// STRING_OUTPUT 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
// Power off in each room
PUSH LG_Power_Off
{
	MPS_1 = -800;
	CD_1 = -800;
	DVD_1 = -800;
	Sat_1 = -800;
}
PUSH LB_Power_Off
{
	MPS_2 = -800;
	CD_2 = -800;
	DVD_2 = -800;
	Sat_2 = -800;
}
PUSH SR_Power_Off
{
	MPS_3 = -800;
	CD_3 = -800;
	DVD_3 = -800;
	Sat_3 = -800;
}
// Large Conference Room Audio Input
PUSH LG_MPS
{
	MPS_1 = 0;
	CD_1 = -800;
	DVD_1 = -800;
	Sat_1 = -800;
}
PUSH LG_CD
{
	MPS_1 = -800;
	CD_1 = 0;
	DVD_1 = -800;
	Sat_1 = -800;
}
PUSH LG_DVD
{
	MPS_1 = -800;
	CD_1 = -800;
	DVD_1 = 0;
	Sat_1 = -800;
}
PUSH LG_Sat
{
	MPS_1 = -800;
	CD_1 = -800;
	DVD_1 = -800;
	Sat_1 = 0;
}
// Lab Audio Input
PUSH LB_MPS
{
	MPS_2 = 0;
	CD_2 = -800;
	DVD_2 = -800;
	Sat_2 = -800;
}
PUSH LB_CD
{
	MPS_2 = -800;
	CD_2 = 0;
	DVD_2 = -800;
	Sat_2 = -800;
}
PUSH LB_DVD
{
	MPS_2 = -800;
	CD_2 = -800;
	DVD_2 = 0;
	Sat_2 = -800;
}
PUSH LB_Sat
{
	MPS_2 = -800;
	CD_2 = -800;
	DVD_2 = -800;
	Sat_2 = 0;
}
// Showroom Audio Input
PUSH SR_MPS
{
	MPS_3 = 0;
	CD_3 = -800;
	DVD_3 = -800;
	Sat_3 = -800;
}
PUSH SR_CD
{
	MPS_3 = -800;
	CD_3 = 0;
	DVD_3 = -800;
	Sat_3 = -800;
}
PUSH SR_DVD
{
	MPS_3 = -800;
	CD_3 = -800;
	DVD_3 = 0;
	Sat_3 = -800;
}
PUSH SR_Sat
{
	MPS_3 = -800;
	CD_3 = -800;
	DVD_3 = -800;
	Sat_3 = 0;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

