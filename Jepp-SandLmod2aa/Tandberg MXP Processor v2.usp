/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics
System Name:
System Number:
Programmer: CRR
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Tandberg MXP Processor v2"
// #HINT ""
#DEFINE_CONSTANT GLOBAL 1
#DEFINE_CONSTANT LOCAL 2

// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT AudioIn1Go;
DIGITAL_INPUT AudioIn2Go;
DIGITAL_INPUT AudioIn3Go;
DIGITAL_INPUT AudioIn4Go;
DIGITAL_INPUT AudioIn5Go;
DIGITAL_INPUT AudioIn6Go;
DIGITAL_INPUT AudioOut1Go;
DIGITAL_INPUT AudioOut2Go;
DIGITAL_INPUT AudioOut3Go;
DIGITAL_INPUT RequestDirectory;
DIGITAL_INPUT SortDirectory;
DIGITAL_INPUT DirectoryFirst;
DIGITAL_INPUT DirectoryPrev;
DIGITAL_INPUT DirectoryNext;
DIGITAL_INPUT DirectoryLast;
DIGITAL_INPUT DirectoryDial;
DIGITAL_INPUT McuFirst;
DIGITAL_INPUT McuPrev;
DIGITAL_INPUT McuNext;
DIGITAL_INPUT McuLast;
DIGITAL_INPUT DirectorySelectName;
DIGITAL_INPUT DirectorySelectNumber1;
DIGITAL_INPUT DirectorySelectNumber2;
DIGITAL_INPUT DialCallNumber1Fb;
DIGITAL_INPUT DialCallNumber2Fb;
DIGITAL_INPUT CallRestrictedFb;
DIGITAL_INPUT PlaceCall;
DIGITAL_INPUT DirectorySaveEntry;
DIGITAL_INPUT DirectoryDeleteEntry;
DIGITAL_INPUT DirectoryAddEntryLocal;
DIGITAL_INPUT DirectoryClearSettings;
DIGITAL_INPUT McuEnterPassword;
DIGITAL_INPUT McuEnterID;
DIGITAL_INPUT StartAccessCodeFb;
DIGITAL_INPUT AccessCodeEnter;
DIGITAL_INPUT DirectorySelect[20];
ANALOG_INPUT AudioIn1Level;
ANALOG_INPUT AudioIn2Level;
ANALOG_INPUT AudioIn3Level;
ANALOG_INPUT AudioIn4Level;
ANALOG_INPUT AudioIn5Level;
ANALOG_INPUT AudioIn6Level;
ANALOG_INPUT AudioOut1Level;
ANALOG_INPUT AudioOut2Level;
ANALOG_INPUT AudioOut3Level;
ANALOG_INPUT EntriesPerScreen;
ANALOG_INPUT McuEntriesPerScreen;
ANALOG_INPUT McuViewSite;
ANALOG_INPUT McuTransmitSite;
ANALOG_INPUT McuDropSite;
ANALOG_INPUT CallQuality;
ANALOG_INPUT CallType;
ANALOG_INPUT DirectoryCallQualityIn;
ANALOG_INPUT DirectoryCAllTypeIn;
STRING_INPUT TextIn$[50];
STRING_INPUT Number1In$[100];
STRING_INPUT Number2In$[100];
BUFFER_INPUT TandbergRx$[1000];
DIGITAL_OUTPUT RequestInProgress;
DIGITAL_OUTPUT Sorting;
DIGITAL_OUTPUT GlobalSelected;
DIGITAL_OUTPUT LocalSelected;
DIGITAL_OUTPUT Line1Connected;
DIGITAL_OUTPUT Line2Connected;
DIGITAL_OUTPUT Line3Connected;
DIGITAL_OUTPUT Line4Connected;
DIGITAL_OUTPUT MCUDropSiteOut;
ANALOG_OUTPUT AudioIn1LevelOut;
ANALOG_OUTPUT AudioIn2LevelOut;
ANALOG_OUTPUT AudioIn3LevelOut;
ANALOG_OUTPUT AudioIn4LevelOut;
ANALOG_OUTPUT AudioIn5LevelOut;
ANALOG_OUTPUT AudioIn6LevelOut;
ANALOG_OUTPUT AudioOut1LevelOut;
ANALOG_OUTPUT AudioOut2LevelOut;
ANALOG_OUTPUT AudioOut3LevelOut;
ANALOG_OUTPUT RecallBar;
ANALOG_OUTPUT ISDNBw;
ANALOG_OUTPUT LanBw;
ANALOG_OUTPUT NPOption;
ANALOG_OUTPUT MCUOption;
ANALOG_OUTPUT LocalEntriesFree;
ANALOG_OUTPUT CurrentMCUScreenOut;
STRING_OUTPUT NearName1$;
STRING_OUTPUT NearName2$;
STRING_OUTPUT NearName3$;
STRING_OUTPUT NearName4$;
STRING_OUTPUT NearName5$;
STRING_OUTPUT FarName1$;
STRING_OUTPUT FarName2$;
STRING_OUTPUT FarName3$;
STRING_OUTPUT FarName4$;
STRING_OUTPUT FarName5$;
STRING_OUTPUT DirectoryName$;
STRING_OUTPUT DirectoryNumber1$;
STRING_OUTPUT DirectoryNumber2$;
STRING_OUTPUT DirectoryNetwork$;
STRING_OUTPUT DirectoryQuality$;
STRING_OUTPUT DirectoryType$;
STRING_OUTPUT McuNumbers$;
STRING_OUTPUT McuSiteNumbers$;
STRING_OUTPUT McuSiteNames$;
STRING_OUTPUT McuViewingSite$;
STRING_OUTPUT CallStatus$;
STRING_OUTPUT CallStatus1Direction$;
STRING_OUTPUT CallStatus2Direction$;
STRING_OUTPUT CallStatus3Direction$;
STRING_OUTPUT CallStatus4Direction$;
STRING_OUTPUT CallStatus1Type$;
STRING_OUTPUT CallStatus2Type$;
STRING_OUTPUT CallStatus3Type$;
STRING_OUTPUT CallStatus4Type$;
STRING_OUTPUT CallStatus1Status$;
STRING_OUTPUT CallStatus2Status$;
STRING_OUTPUT CallStatus3Status$;
STRING_OUTPUT CallStatus4Status$;
STRING_OUTPUT DirectoryText$;
STRING_OUTPUT DialCallNumber1$;
STRING_OUTPUT DialCallNumber2$;
STRING_OUTPUT AccessCode$;
STRING_OUTPUT SystemType$;
STRING_OUTPUT TandbergTx$;
STRING_OUTPUT Directory$[20];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
*******************************************************************************************/
INTEGER Semaphore, Number, Paramater, Level, Marker1, Marker2, Location, i, j, TotalRecords, TempLocation[301], Directory[301];
INTEGER Temp, TotalScreens, CurrentScreen, Counter, StartCounter, k, Marker3, DirectorySelected, TempDirectory, StoreCounter;
INTEGER RecallCounter, TempCount, McuNumber[50], McuSiteNumber[50], McuCounter, TotalMcuScreens, CurrentMcuScreen, Offset;
INTEGER ViewMcu, ViewSite, Found, Site, Channel, CallRestricted, LastDirectory, LastDirectoryIndex, SavedSite;
INTEGER DirectoryUsed[100];
STRING Tempstring$[200], Text$[24], TempStorage$[301][24], Storage$[301][24], Name$[50], Temp$[24], Temp2$[24];
STRING McuSiteName$[50][24], Direction$[10], Type$[10], Status$[15], DirectoryNameInt$[24], DirectoryNumber1Int$[40], DirectoryNumber2Int$[40];
STRING DialCallPrefix$[7], DialCallNumber1Int$[50], DialCallNumber2Int$[50], CallQuality$[10], DirCallQuality$[10], CallType$[3], DirCallType$[3];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SendAudioLevel(Integer Field, Integer Value) 
	{
	Makestring(TandbergTx$, "audiolevel i%d %d\n", Field, Value); 
	}

Function SendAudioOutLevel(Integer Field, Integer Value) 
	{
	Makestring(TandbergTx$, "audiolevel o%d %d\n", Field, Value); 
	}
	
Function ClearSettings()
	{
	DirectoryName$ = "";
	DirectoryNameInt$ = "";
	DirectoryNumber1$ = "";
	DirectoryNumber1Int$ = "";
	DirectoryNumber2$ = "";
	DirectoryNumber2Int$ = "";
	}
	
Function RefreshDirectory()
	{
	if(TotalRecords >= EntriesPerScreen * CurrentScreen) 
		{
		Counter = EntriesPerScreen * CurrentScreen;
		StartCounter = (CurrentScreen - 1) * EntriesPerScreen + 1;
		}
	else
		{
		Counter = TotalRecords;
		StartCounter = (CurrentScreen - 1) * EntriesPerScreen + 1;
		}
	k = 1;
	For(i = StartCounter to Counter)
		{
		Directory$[k] = Storage$[i];
		k = k + 1;
		processlogic();
		}
	if(k <= EntriesPerScreen)
		{
		for(i = k to entriesPerScreen)
			{
			Directory$[i] = " ";
			processlogic();
			}
		}
	}
	
Function UpdateMcuScreen()
	{
	Offset = (CurrentMcuScreen - 1) * McuEntriesPerScreen;
	if(CurrentMcuScreen * McuEntriesPerScreen <= McuCounter)
		{
		for(i = 1 to McuEntriesPerScreen)
			{
			Makestring(McuNumbers$, "\x1B%s%d", chr(i + 32), McuNumber[Offset + i]);
			Makestring(McuSiteNumbers$, "\x1B%s%d", chr(i + 32), McuSiteNumber[Offset + i]);
			Makestring(McuSiteNames$, "\x1B%s%s", chr(i + 32), McuSiteName$[Offset + i]);
			processlogic();
			}
		}
	else
		{
		for(i = 1 to McuCounter mod McuEntriesPerScreen)
			{
			Makestring(McuNumbers$, "\x1B%s%d", chr(i + 32), McuNumber[Offset + i]);
			Makestring(McuSiteNumbers$, "\x1B%s%d", chr(i + 32), McuSiteNumber[Offset + i]);
			Makestring(McuSiteNames$, "\x1B%s%s", chr(i + 32), McuSiteName$[Offset + i]);
			processlogic();
			}
		for(i = McuCounter mod McuEntriesPerScreen + 1 to McuEntriesPerScreen)
			{
			Makestring(McuNumbers$, "\x1B%s ", chr(i + 32));
			Makestring(McuSiteNumbers$, "\x1B%s ", chr(i + 32));
			Makestring(McuSiteNames$, "\x1B%s ", chr(i + 32));
			processlogic();	
			}
		}
    }
    
Function DetermineNumberOfScreens()
	{
	if(TotalRecords mod EntriesPerScreen > 0) TotalScreens = TotalRecords / EntriesPerScreen + 1;
	else TotalScreens = TotalRecords / EntriesPerScreen;
	}
       
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH AudioIn1Go { Call SendAudioLevel(1, AudioIn1Level); }
PUSH AudioIn2Go { Call SendAudioLevel(2, AudioIn2Level); }
PUSH AudioIn3Go { Call SendAudioLevel(3, AudioIn3Level); }
PUSH AudioIn4Go { Call SendAudioLevel(4, AudioIn4Level); }
PUSH AudioIn5Go { Call SendAudioLevel(5, AudioIn5Level); }
PUSH AudioIn6Go { Call SendAudioLevel(6, AudioIn6Level); }
PUSH AudioOut1Go { Call SendAudioOutLevel(1, AudioOut1Level); }
PUSH AudioOut2Go { Call SendAudioOutLevel(2, AudioOut2Level); }
PUSH AudioOut3Go { Call SendAudioOutLevel(3, AudioOut3Level); }
                                                                 
PUSH RequestDirectory
	{
	RecallBar = 1;
	RequestInProgress = 1;
	LocalEntriesFree = 99;
	For(i = 1 to 300)
		{
		clearbuffer(TempStorage$[i]);
		clearbuffer(Storage$[i]);
		TempLocation[i] = 0;
		Directory[i] = 0;
		}
	For(i = 1 to 99)
		{
		DirectoryUsed[i] = 0;
		}
	StoreCounter = 1;
	RecallCounter = 1;
	TandbergTx$ = "directory 1\n";
	}
	
PUSH SortDirectory
	{
	Sorting = 1;
	TotalRecords = 0;
	For(i = 1 to 300)
		{
		if(len(Tempstorage$[i]) > 0)
			{
			TotalRecords = TotalRecords + 1;
			}
		}
	Call DetermineNumberOfScreens();
	if(totalrecords > 1)
		{
		if(StoreCounter < 3)
			TempCount = 2;
		else 
			TempCount = StoreCounter - 2;
		k = TempCount;
		for(j = 1 to TempCount)
			{
			for(i = 1 to k)
				{
				if(TempStorage$[i + 1] < TempStorage$[i])
					{
					Temp$ = TempStorage$[i + 1];
					Temp2$ = Storage$[i + 1];
					Temp = TempLocation[i + 1];
					TempDirectory = Directory[i + 1];
					TempStorage$[i + 1] = TempStorage$[i];
					TempLocation[i + 1] = TempLocation[i];
					Storage$[i + 1] = Storage$[i];
					Directory[i + 1] = Directory[i];
					TempStorage$[i] = Temp$;
					TempLocation[i] = Temp;	
					Storage$[i] = Temp2$;	
					Directory[i] = TempDirectory;		
					}
				}
			k = k - 1;
			}
		}
	Sorting = 0;
	if(savedsite = 1)
		{
		SavedSite = 0;
		CurrentScreen = 1;
		Call RefreshDirectory();
        }
	}
	
PUSH DirectoryFirst
	{
	CurrentScreen = 1;
	Call RefreshDirectory();
	}
	
PUSH DirectoryNext
	{
	if(CurrentScreen < TotalScreens)
		{
		CurrentScreen = CurrentScreen + 1;
		Call RefreshDirectory();
		}
	}

PUSH DirectoryPrev
	{
	if(CurrentScreen > 1)
		{
		CurrentScreen = CurrentScreen - 1;
		Call RefreshDirectory();
		}
	}

PUSH DirectoryLast
	{
	CurrentScreen = TotalScreens;
	Call RefreshDirectory();
	}
	
PUSH DirectorySelect
	{
	if(len(TempStorage$[(CurrentScreen - 1) * EntriesPerScreen + getlastmodifiedarrayindex()]) > 0)
		{
		DirectorySelected = (CurrentScreen - 1) * EntriesPerScreen + getlastmodifiedarrayindex();
		if(Directory[DirectorySelected] = LOCAL)
			Makestring(TandbergTx$, "directory %d\n", TempLocation[DirectorySelected]);
		else if(Directory[DirectorySelected] = GLOBAL)
			Makestring(TandbergTx$, "globdirectory %d\n", TempLocation[DirectorySelected]); 
		}                                                                                                                       
    }
    
PUSH DirectoryDial
	{
	if(DirectorySelected > 0)
		{
		if(Directory[DirectorySelected] = LOCAL)
			Makestring(TandbergTx$, "dial l%d\n", TempLocation[DirectorySelected]);
		else if(Directory[DirectorySelected] = GLOBAL)
			Makestring(TandbergTx$, "dial g%d\n", TempLocation[DirectorySelected]);
		}
	}
	
Push McuFirst
	{
	CurrentMcuScreen = 1;
	CurrentMCUScreenOut = CurrentMCUScreen;
	Call UpdateMcuScreen();
	}

PUSH McuPrev
	{
	if(CurrentMcuScreen > 1)
		{
		CurrentMcuScreen = CurrentMcuScreen - 1;
		CurrentMCUScreenOut = CurrentMCUScreen;
		Call UpdateMcuScreen();
		}
	}

PUSH McuNext
	{
	if(CurrentMcuScreen < TotalMcuScreens)
		{
		CurrentMcuScreen = CurrentMcuScreen + 1;
		CurrentMCUScreenOut = CurrentMCUScreen;
		Call UpdateMcuScreen();
		}
	}

PUSH McuLast
	{
	CurrentMcuScreen = TotalMcuScreens;
	CurrentMCUScreenOut = CurrentMCUScreen;
	Call UpdateMcuScreen();
	}
	
PUSH DirectorySelectName
	{
	DirectoryText$ = DirectoryNameInt$;
	}
	
PUSH DirectorySelectNumber1
	{
	DirectoryText$ = DirectoryNumber1Int$;
	}
	
PUSH DirectorySelectNumber2
	{
	DirectoryText$ = DirectoryNumber2Int$;
	}

PUSH CallRestrictedFb
	{
	CallRestricted = 1;
	}

Release CallRestrictedFb
	{
	CallRestricted = 0;
	}
		
PUSH PlaceCall
	{
    //DialCallPrefix$ = "9303328";
    if(CallQuality$ <> "2xh221")
    	{
    	if(CallRestricted = 0)
    		{
    		Makestring(TandbergTx$, "DIAL %s %s %s\n", DialCallNumber1Int$, CallQuality$, CallType$);
    		}
    	else
    		{
    		Makestring(TandbergTx$, "DIAL %s %sr %s\n", DialCallNumber1Int$, CallQuality$, CallType$);
    		}
    	}
    else
    	{
    	if(CallRestricted = 0)
    		{
    		Makestring(TandbergTx$, "DIAL %s**%s %s %s\n", DialCallNumber1Int$, DialCallNumber2Int$, CallQuality$, CallType$);
    		}
    	else
    		{
    		Makestring(TandbergTx$, "DIAL %s**%s %sr %s\n", DialCallNumber1Int$, DialCallNumber2Int$, CallQuality$, CallType$);
    		}
    	} 
    }
    
PUSH DirectoryAddEntryLocal
	{
	Found = 0;
	Counter = 1;
	While((found = 0) && (Counter <= 99))
		{
		if(DirectoryUsed[Counter] = 0)
			{
			Found = 1;
			if((len(DirectoryNameInt$) > 0) && (len(DirectoryNumber1Int$) > 0))
				{
				DirectoryUsed[Counter] = 1;
				TotalRecords = TotalRecords + 1;
				StoreCounter = StoreCounter + 1;
				Storage$[TotalRecords] = left(DirectoryNameInt$, 24);
				Tempstorage$[TotalRecords] = lower(left(DirectoryNameInt$, 24));
				TempLocation[TotalRecords] = Counter;
				Directory[TotalRecords] = LOCAL;
				LocalEntriesFree = LocalEntriesFree - 1;
				Call DetermineNumberOfScreens();
				SavedSite = 1;
				if(DirCallQuality$ <> "2xh221")
					{
					if(find(" ", DirectoryNameInt$) = 0)
						Makestring(TandbergTx$, "directory add %s %s %s %s\n", DirectoryNumber1Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
					else
						Makestring(TandbergTx$, "directory add %s %s %s \x22%s\x22\n", DirectoryNumber1Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
					}
				else
					{
					if(find(" ", DirectoryNameInt$) = 0)
						Makestring(TandbergTx$, "directory add %s**%s %s %s %s\n", DirectoryNumber1Int$, DirectoryNumber2Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
					else
						Makestring(TandbergTx$, "directory add %s**%s %s %s \x22%s\x22\n", DirectoryNumber1Int$, DirectoryNumber2Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
					}
				}
			}
		else
			{
			Counter = Counter + 1;
			}
		}
	}

Push DirectorySaveEntry
	{
	if((LastDirectory = LOCAL) && (len(DirectoryNameInt$) > 0) && (len(DirectoryNumber1Int$) > 0))
		{
		if(DirCallQuality$ <> "2xh221")
			{
			if(find(" ", DirectoryNameInt$) = 0)
				Makestring(TandbergTx$, "directory %d %s %s %s %s\n", LastDirectoryIndex, DirectoryNumber1Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
			else
				Makestring(TandbergTx$, "directory %d %s %s %s \x22%s\x22\n", LastDirectoryIndex, DirectoryNumber1Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
			}
		else
			{
			if(find(" ", DirectoryNameInt$) = 0)				
				Makestring(TandbergTx$, "directory %d %s**%s %s %s %s\n", LastDirectoryIndex, DirectoryNumber1Int$, DirectoryNumber2Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
			else
				Makestring(TandbergTx$, "directory %d %s**%s %s %s \x22%s\x22\n", LastDirectoryIndex, DirectoryNumber1Int$, DirectoryNumber2Int$, DirCallQuality$, DirCallType$, DirectoryNameInt$);
			}
		Storage$[DirectorySelected] = left(DirectoryNameInt$, 24);
		Tempstorage$[DirectorySelected] = lower(left(DirectoryNameInt$, 24));
		SavedSite = 1;
		}
	}
	
PUSH DirectoryDeleteEntry
	{
	if(LastDirectory = LOCAL)
		{
		Call ClearSettings();
		DirectoryUsed[LastDirectoryIndex] = 0;
		LocalEntriesFree = LocalEntriesFree + 1;
		StoreCounter = StoreCounter - 1;
		Makestring(TandbergTx$, "directory %d \x22\x22\n", LastDirectoryIndex);
		if(TotalRecords > 1)
			{
			Sorting = 1;
			for(i = DirectorySelected to TotalRecords)
				{
				TempStorage$[i] = TempStorage$[i + 1];
				TempLocation[i] = TempLocation[i + 1];
				Storage$[i] = Storage$[i + 1];
				Directory[i] = Directory[i + 1];
				}
			TotalRecords = TotalRecords - 1;
			Call DetermineNumberOfScreens();
			Sorting = 0;
			CurrentScreen = 1;
			Call RefreshDirectory();
			}
		}
	}
	
PUSH DirectoryClearSettings
	{
	Call ClearSettings();
	}
	
PUSH McuEnterPassword
	{
	Makestring(TandbergTx$, "mcucommand password %s\n", TextIn$);
	}
	
PUSH McuEnterID
	{
	Makestring(TandbergTx$, "mcucommand id %s\n", TextIn$);
	}
	
PUSH AccessCodeEnter
	{
	Makestring(TandbergTx$, "access use %s\n", TextIn$);
	}
		
CHANGE TextIn$
	{
	if(DirectorySelectName = 1)
		{
		DirectoryNameInt$ = TextIn$;
		DirectoryName$ = TextIn$;
		}
	else if(DirectorySelectNumber1 = 1)
		{
		DirectoryNumber1Int$ = TextIn$;
		DirectoryNumber1$ = TextIn$;		
		}
	else if(DirectorySelectNumber2 = 1)
		{
		DirectoryNumber2Int$ = TextIn$;
		DirectoryNumber2$ = TextIn$;		
		}
	else if(DialCallNumber2Fb = 1)
		{
		DialCallNumber2$ = TextIn$;
		DialCallNumber2Int$ = TextIn$;
		}
	else if(DialCallNumber1Fb = 1)
		{
		DialCallNumber1$ = TextIn$;
		DialCallNumber1Int$ = TextIn$;
		}
	else if(StartAccessCodeFb = 1)
		{
		AccessCode$ = TextIn$;
		}
	}
	
Change Number1In$
	{
	DialCallNumber1Int$ = Number1In$;
	}

Change Number2In$
	{
	DialCallNumber2Int$ = Number2In$;
	}
	
Change McuViewSite
	{
	if((McuViewSite > 0) && (McuViewSite < 11))
		{
		Site = (CurrentMcuScreen - 1) * McuEntriesPerScreen + McuViewSite;
		Makestring(TandbergTx$, "mcucommand viewrequest %d, %d\n", McuNumber[Site], McuSiteNumber[Site]);
		}
	}

Change McuTransmitSite
	{
	if((McuTransmitSite > 0) && (McuTransmitSite < 11))
		{
		Site = (CurrentMcuScreen - 1) * McuEntriesPerScreen + McuTransmitSite;
		Makestring(TandbergTx$, "mcucommand floor %d, %d\n", McuNumber[Site], McuSiteNumber[Site]);
		}
	}

Change McuDropSite
	{
	if((McuViewSite > 0) && (McuViewSite < 11))
		{
//		Site = (CurrentMcuScreen - 1) * McuEntriesPerScreen + McuDropSite;
//		Makestring(TandbergTx$, "mcucommand disconnect %d, %d\n", McuNumber[Site], McuSiteNumber[Site]);
		MCUDropSiteOut = 1;
		processlogic();
		MCUDropSiteOut = 0;
		}
	}

CHANGE CallQuality
	{
	Switch(CallQuality)
		{
		Case(1): { CallQuality$ = ""; }
		Case(2): { CallQuality$ = "1xh221"; }
		Case(3): { CallQuality$ = "2xh221"; }
		Case(4): { CallQuality$ = "1b"; }
		Case(5): { CallQuality$ = "2b"; }
		Case(6): { CallQuality$ = "3b"; }
		Case(7): { CallQuality$ = "4b"; }
		Case(8): { CallQuality$ = "5b"; }
		Case(9): { CallQuality$ = "6b"; }
		Case(10): { CallQuality$ = "8b"; }
		Case(11): { CallQuality$ = "12b"; }
		Case(12): { CallQuality$ = "H0"; }
		Case(13): { CallQuality$ = "auto"; }
		Case(14): { CallQuality$ = "max"; }
		Case(15): { CallQuality$ = "tlph"; }
		}
	}

CHANGE CallType
	{
	if((CallType > 0) && (CallType < 11))
		Makestring(CallType$, "p%d", CallType);
	else
		CallType$ = "p1";
	}
		
CHANGE DirectoryCallQualityIn
	{
	Switch(DirectoryCallQualityIn)
		{
		Case(1): { DirCallQuality$ = ""; }
		Case(2): { DirCallQuality$ = "1xh221"; }
		Case(3): { DirCallQuality$ = "2xh221"; }
		Case(4): { DirCallQuality$ = "1b"; }
		Case(5): { DirCallQuality$ = "2b"; }
		Case(6): { DirCallQuality$ = "3b"; }
		Case(7): { DirCallQuality$ = "4b"; }
		Case(8): { DirCallQuality$ = "5b"; }
		Case(9): { DirCallQuality$ = "6b"; }
		Case(10): { DirCallQuality$ = "8b"; }
		Case(11): { DirCallQuality$ = "12b"; }
		Case(12): { DirCallQuality$ = "H0"; }
		Case(13): { DirCallQuality$ = "auto"; }
		Case(14): { DirCallQuality$ = "max"; }
		Case(15): { DirCallQuality$ = "tlph"; }
		}
	}

CHANGE DirectoryCallTypeIn
	{
	if((DirectoryCallTypeIn > 0) && (DirectoryCallTypeIn < 11))
		Makestring(DirCallType$, "p%d", DirectoryCallTypeIn);
	else
		DirCallType$ = "p1";
	}
		
CHANGE TandbergRx$
	{
    if(Semaphore = 0)
		{
		Semaphore = 1;
		While(find("\x0D\x0A", TandbergRx$) > 0)
			{
			Tempstring$ = Remove("\x0D\x0A", TandbergRx$);
			if(find("*P ", Tempstring$) > 0)
				{
				Tempstring$ = Right(Tempstring$, len(Tempstring$) - find("*P ", Tempstring$) + 1);
				if(find("audiolevel", Tempstring$) > 0)
					{
					Paramater = byte(Tempstring$, 15);
					Number = byte(Tempstring$, 16);
					Level = atoi(mid(tempstring$, 18, 2)) - 1;
					switch(paramater)
						{
						case(105):      //input
							{
							switch(Number)
								{
								case(49): { AudioIn1LevelOut = Level; }
								case(50): { AudioIn2LevelOut = Level; }
								case(51): { AudioIn3LevelOut = Level; }
								case(52): { AudioIn4LevelOut = Level; }
								case(53): { AudioIn5LevelOut = Level; }
								case(54): { AudioIn6LevelOut = Level; }
								}
							}
						case(111):     //output
							{
							switch(number)
								{
								case(49): { AudioOut1LevelOut = Level; }
								case(50): { AudioOut2LevelOut = Level; }
								case(51): { AudioOut3LevelOut = Level; }
								}
							}
						}
					}
				else if(find("vidname", Tempstring$) > 0)
					{
					Number = Byte(Tempstring$, 12);
					Text$ = mid(Tempstring$, 14, len(Tempstring$) - 15);
					if(byte(Text$, 1) = 34) Text$ = mid(Text$, 2, len(Text$) - 2);
					Switch(Number)
						{
						case(49): { NearName1$ = Text$; }
						case(50): { NearName2$ = Text$; }
						case(51): { NearName3$ = Text$; }
						case(52): { NearName4$ = Text$; }
						case(53): { NearName5$ = Text$; }
						}
					}
				else if(find("globdirectory", Tempstring$) > 0)
					{
					Marker1 = find(" ", Tempstring$, 18);
					if((RequestInProgress = 1) && !((mid(Tempstring$, Marker1 + 1, 2) = "\x22\x22") && (mid(Tempstring$, len(Tempstring$) - 3, 2) = "\x22\x22")))
						{
						Location = atoi(mid(tempstring$, 18, 3));
						Marker1 = reversefind(" ", tempstring$);
						Marker2 = reversefind("\x22", tempstring$);
						if(marker2 < marker1)
							{
							Name$ = mid(tempstring$, Marker1 + 1, len(Tempstring$) - Marker1 - 2);
							}
						else
							{
							Marker1 = reversefind("\x22", tempstring$, Marker2 - 1);
							Name$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
							}
						if(len(Name$) = 0)
							{
							Marker1 = find(" ", Tempstring$, 18);
							Marker2 = find(" ", Tempstring$, Marker1 + 1);
							Marker3 = find("**", mid(Tempstring$, MArker1, Marker2 - Marker1));
							if(Marker3 = 0)
								{
								Name$ = mid(Tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
								}
							else
								{
								Name$ = mid(Tempstring$, Marker1 + 1, Marker3 - Marker1 - 1);
								}
							}
						TempStorage$[StoreCounter] = lower(left(Name$, 24));
						Storage$[StoreCounter] = left(Name$, 24);
						TempLocation[StoreCounter] = Location;
						Directory[StoreCounter] = GLOBAL;
						StoreCounter = StoreCounter + 1;
						recallcounter = recallcounter + 1;
						RecallBar = RecallBar + 1;
						if(RecallCounter <= 199)
							{
							Makestring(TandbergTx$, "globdirectory %d\n", RecallCounter);
							}
						else
							{
							RequestInProgress = 0;
							}
						}
					else if(RequestInProgress = 1)
						{
						RecallCounter = RecallCounter + 1;
						RecallBar = RecallBar + 1;
						if(recallcounter <= 199)
							Makestring(TandbergTx$, "globdirectory %d\n", recallcounter);
						else
							{
							RequestInProgress = 0;
							}							
						}
					else if(RequestInProgress = 0)
						{
						LocalSelected = 0;
						GlobalSelected = 1;
						LastDirectory = GLOBAL;
						LastDirectoryIndex = atoi(tempstring$);
						Marker1 = reversefind(" ", tempstring$);
						Marker2 = reversefind("\x22", tempstring$);
						if(marker2 < marker1)
							{
							DirectoryName$ = mid(tempstring$, Marker1 + 1, len(Tempstring$) - Marker1 - 2);
							}
						else
							{
							Marker1 = reversefind("\x22", tempstring$, Marker2 - 1);
							DirectoryName$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
							}
						Marker1 = find(" ", Tempstring$, 18);
						Marker2 = find(" ", Tempstring$, Marker1 + 1);
						Marker3 = find("**", mid(Tempstring$, MArker1, Marker2 - Marker1));
						if(Marker3 = 0)
							{
							DirectoryNumber1$ = mid(Tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
							DirectoryNumber2$ = "";
							}
						else
							{
							DirectoryNumber1$ = mid(Tempstring$, Marker1 + 1, Marker3 - Marker1 - 1);
							DirectoryNumber2$ = mid(Tempstring$, Marker3 + 2, Marker2 - Marker3 - 2);
							}
						Marker3 = find(" ", Tempstring$, Marker2 + 1);
						DirectoryQuality$ = mid(Tempstring$, Marker2 + 1, Marker3 - Marker2 - 1);
						MArker2 = Marker3;
						Marker3 = find(" ", Tempstring$, MArker2 + 1);
						DirectoryType$ = mid(Tempstring$, MArker2 + 1, Marker3 - Marker2 - 1); 
						}			
					}
				else if(find("directory", Tempstring$) > 0)
					{
					Marker1 = find(" ", Tempstring$, 14);
					if((RequestInProgress = 1) && !((mid(Tempstring$, Marker1 + 1, 2) = "\x22\x22") && (mid(Tempstring$, len(Tempstring$) - 3, 2) = "\x22\x22")))
						{
						Location = atoi(mid(tempstring$, 14, 3));
						DirectoryUsed[Location] = 1;
						LocalEntriesFree = LocalEntriesFree - 1;
						Marker1 = reversefind(" ", tempstring$);
						Marker2 = reversefind("\x22", tempstring$);
						if(marker2 < marker1)
							{
							Name$ = mid(tempstring$, Marker1 + 1, len(Tempstring$) - Marker1 - 2);
							}
						else
							{
							Marker1 = reversefind("\x22", tempstring$, Marker2 - 1);
							Name$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
							}
						if(len(Name$) = 0)
							{
							Marker1 = find(" ", Tempstring$, 14);
							Marker2 = find(" ", Tempstring$, Marker1 + 1);
							Marker3 = find("**", mid(Tempstring$, MArker1, Marker2 - Marker1));
							if(Marker3 = 0)
								{
								Name$ = mid(Tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
								}
							else
								{
								Marker3 = find("**", Tempstring$, Marker1 + 1);
								Name$ = mid(Tempstring$, Marker1 + 1, Marker3 - Marker1 - 1);
								}
							}
						TempStorage$[StoreCounter] = lower(left(Name$, 24));
						Storage$[StoreCounter] = left(Name$, 24);
						TempLocation[StoreCounter] = Location;
						Directory[StoreCounter] = LOCAL;
						StoreCounter = StoreCounter + 1;
						recallCounter = RecallCounter + 1;
						RecallBar = RecallBar + 1;
						if(recallcounter <= 99)
							Makestring(TandbergTx$, "directory %d\n", recallcounter);
						else
							{
							TandbergTx$ = "globdirectory 1\n";					
							RecallCounter = 1;
							}
						}
					else if(RequestInProgress = 1)
						{
						RecallCounter = RecallCounter + 1;
						RecallBar = RecallBar + 1;
						if(recallcounter <= 99)
							Makestring(TandbergTx$, "directory %d\n", recallcounter);
						else
							{
							TandbergTx$ = "globdirectory 1\n";
							RecallCounter = 1;
							}
						}
					else if(RequestInProgress = 0)
						{
						LocalSelected = 1;
						GlobalSelected = 0;
						LastDirectory = LOCAL;
						LastDirectoryIndex = atoi(tempstring$);
						Marker1 = reversefind(" ", tempstring$);
						Marker2 = reversefind("\x22", tempstring$);
						if(marker2 < marker1)
							{
							DirectoryNameInt$ = mid(tempstring$, Marker1 + 1, len(Tempstring$) - Marker1 - 2);
							DirectoryName$ = DirectoryNameInt$;
							}
						else
							{
							Marker1 = reversefind("\x22", tempstring$, Marker2 - 1);
							DirectoryNameInt$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
							DirectoryName$ = DirectoryNameInt$;
							}
						Marker1 = find(" ", Tempstring$, 14);
						Marker2 = find(" ", Tempstring$, Marker1 + 1);
						Marker3 = find("**", mid(Tempstring$, MArker1, Marker2 - Marker1));
						if(Marker3 = 0)
							{
							DirectoryNumber1Int$ = mid(Tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
							DirectoryNumber2Int$ = "";
							DirectoryNumber1$ = DirectoryNumber1Int$;
							DirectoryNumber2$ = DirectoryNumber2Int$;
							}
						else
							{
							Marker3 = find("**", Tempstring$, Marker1 + 1);
							DirectoryNumber1Int$ = mid(Tempstring$, Marker1 + 1, Marker3 - Marker1 - 1);
							DirectoryNumber2Int$ = mid(Tempstring$, Marker3 + 2, Marker2 - Marker3 - 2);
							DirectoryNumber1$ = DirectoryNumber1Int$;
							DirectoryNumber2$ = DirectoryNumber2Int$;
							}
						Marker3 = find(" ", Tempstring$, Marker2 + 1);
						DirectoryQuality$ = mid(Tempstring$, Marker2 + 1, Marker3 - Marker2 - 1);
						Marker2 = Marker3;
						Marker3 = find(" ", Tempstring$, MArker2 + 1);
						DirectoryType$ = mid(Tempstring$, MArker2 + 1, Marker3 - Marker2 - 1); 
						}			
					}
				}
			else if(find("*F ", Tempstring$) > 0)
				{
				Tempstring$ = Right(Tempstring$, len(Tempstring$) - find("*F ", Tempstring$) + 1);
				if(find("capstart", Tempstring$) > 0)
					{
					FarName1$ = " ";
					FarName2$ = " ";
					FarName3$ = " ";
					FarName4$ = " ";
					FarName5$ = " ";
					}
				else if(find("capvid ", Tempstring$) > 0)
					{
					Number = Byte(Tempstring$, 11);
					Marker1 = find("\x22", Tempstring$, 14);
					Text$ = mid(Tempstring$, 14, Marker1 - 14);
					Switch(Number)
						{
						case(49): { FarName1$ = Text$; }
						case(50): { FarName2$ = Text$; }
						case(51): { FarName3$ = Text$; }
						case(52): { FarName4$ = Text$; }
						case(53): { FarName5$ = Text$; }
						}
					}
				}
			else if(find("*S ", Tempstring$) > 0)
				{
				if(find("callstatus ", tempstring$) > 0)
					{
					Channel = atoi(Tempstring$);
					Marker1 = find(" ", tempstring$, 15);
					MArker2 = find(" ", Tempstring$, Marker1 + 1);
					Direction$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
					Marker1 = Marker2;
					Marker2 = find(" ", tempstring$, Marker1 + 1);
					Type$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
					Marker1 = Marker2;
					Marker2 = find(" ", tempstring$, Marker1 + 1);
					Status$ = mid(tempstring$, Marker1 + 1, Marker2 - Marker1 - 1);
					Makestring(CallStatus$, "Channel %d %s", Channel, Status$);
					Switch(Channel)
						{
						Case(1):
							{
							CallStatus1Direction$ = Direction$;
							CallStatus1Type$  = Type$;
							CallStatus1Status$ = Status$;
							if(Status$ = "connected")
								Line1Connected = 1;
							else
								Line1Connected = 0;
							}
						Case(2):
							{
							CallStatus2Direction$ = Direction$;
							CallStatus2Type$  = Type$;
							CallStatus2Status$ = Status$;
							if(Status$ = "connected")
								Line2Connected = 1;
							else
								Line2Connected = 0;
							}
						Case(3):
							{
							CallStatus3Direction$ = Direction$;
							CallStatus3Type$  = Type$;
							CallStatus3Status$ = Status$;
							if(Status$ = "connected")
								Line3Connected = 1;
							else
								Line3Connected = 0;
							}
						Case(4):
							{
							CallStatus4Direction$ = Direction$;
							CallStatus4Type$  = Type$;
							CallStatus4Status$ = Status$;
							if(Status$ = "connected")
								Line4Connected = 1;
							else
								Line4Connected = 0;
							}
						}						
					}
				else if(find("mcustat ", Tempstring$) > 0)
					{
					Tempstring$ = Right(Tempstring$, len(Tempstring$) - 8);
					if(find("terminals start", Tempstring$) > 0)
						{
						McuCounter = 0;
						}
					else if(find("terminals end", Tempstring$) > 0)
						{
						if(McuCounter mod McuEntriesPerScreen = 0)
							TotalMcuScreens = McuCounter / McuEntriesPerScreen;
						else
							TotalMcuScreens = McuCounter / McuEntriesPerScreen + 1;
						CurrentMcuScreen = 1;
						CurrentMCUScreenOut = CurrentMCUScreen;
						Call UpdateMcuScreen();
						}
					else if(find("terminals ", tempstring$) > 0)
						{
						if(McuCounter < 51)
							McuCounter = McuCounter + 1;
						Marker1 = find("\x2C", tempstring$, 11);
						Marker2 = find(" ", tempstring$, Marker1 + 1);
						Marker3 = find("\x0D", tempstring$, Marker2 + 1);
						McuNumber[McuCounter] = atoi(tempstring$);
						McuSiteNumber[McuCounter] = atoi(mid(tempstring$, Marker1 + 1, 4));
						if(Marker3 - 1 > Marker2)
							McuSiteName$[McuCounter] = mid(tempstring$, Marker2 + 1, Marker3 - Marker2 - 1);
						else
							Makestring(McuSiteName$[McuCounter], "Site %d, %d", McuNumber[McuCounter], McuSiteNumber[McuCounter]);
						}
					else if((find("view ", Tempstring$) > 0) && (find("request", tempstring$) = 0))
						{
						ViewMcu = atoi(tempstring$);
						Marker1 = find("\x2C", Tempstring$);
						ViewSite = atoi(mid(tempstring$, Marker1 + 1, 3));
						found = 0;
						i = 1;
						while((found = 0) && (i <= McuCounter))
							{
							if((ViewMcu = McuNumber[i]) && (ViewSite = McuSiteNumber[i]))
								{
								found = 1;
								McuViewingSite$ = McuSiteName$[i];
								}
							else
								{
								i = i + 1;
								}
							}
						}
					}  
				}
			else if(find("SWCfg: TotalBw=", Tempstring$) > 0)
				{
				Marker1 = find(";ISDNBw=", tempstring$);
				IsdnBw = atoi(mid(TempString$, Marker1 + 8, 5));
				Marker1 = find(";LANBw=", tempstring$);
				LanBw = atoi(mid(Tempstring$, Marker1 + 7, 5));
				MArker1 = find(";NP=", tempstring$);
				NPOption = atoi(mid(tempstring$, Marker1 + 4, 1));
				Marker1 = find(";MCU=", tempstring$);
				MCUOption = atoi(mid(tempstring$, Marker1 + 5, 1));
				}
			else if(find("Codec version: TANDBERG CODEC ", Tempstring$) > 0)
				{
				SystemType$ = mid(Tempstring$, 31, len(Tempstring$) - 32);
				}							
			}
		Semaphore = 0;
		}						
	}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
	{
    Semaphore = 0;
    DirectorySelected = 0;
    Sorting = 0;
    RequestInProgress = 0;
	RecallBar = 0;
	CallRestricted = 0;
	SavedSite = 0;
	LocalSelected = 0;
	GlobalSelected = 0;
	Line1Connected = 0;
	Line2Connected = 0;
	Line3Connected = 0;
	Line4Connected = 0;
	for(i = 1 to 50)
		{
		McuNumber[i] = 0;
		McuSiteNumber[i] = 0;
		McuSiteName$[i] = "";
		}
	CallType$ = "p1";
	DirCallType$ = "p1";
	}

