/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:TANDBERG
System Name:
System Number:
Programmer:BM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "MXP Parser - Director-(Rev0-00-0)"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
//#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT  CodecBuffer$[4096];

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT  XACLIInfo$;
STRING_OUTPUT  CodecInfo$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER nBusy,nParse,nMarker,nValue,nCount,nCount1;
STRING cTempBuffer$[4096],cTemp$[100],cParent$[50],cInfo$[1000],cXACLIInfoBuffer$[10000];
STRING cElements[100][100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function FormatInfo()
{
  cTemp$="";
  cparent$="";
  cInfo$="";
  nValue=0;
  nMarker=0;
  nCount=0;
  cTemp$=REMOVE("\x0A",cXACLIInfoBuffer$);
  cTemp$=MID(cTemp$,1,LEN(cTemp$)-2);
  nMarker=FIND("(",cTemp$);
  IF(nMarker>0)
  {
   cParent$=MID(cTemp$,1,nMarker-2);
   XACLIInfo$=cTemp$ + "\n";
  }
  ELSE
  {
   nMarker=REVERSEFIND(":",cTemp$);
   IF(nMarker<>LEN(cTemp$))
   {
    XACLIInfo$=cTemp$+"\n";
   } 
   cParent$=cTemp$;
  }
  WHILE(LEN(cXACLIInfoBuffer$))
  {
   cTemp$=REMOVE("\x0A",cXACLIInfoBuffer$);
   cTemp$=MID(cTemp$,1,LEN(cTemp$)-2);
   nValue=0;
   cInfo$="";
   FOR(nCount=1 TO LEN(cTemp$))
   {
    IF(BYTE(cTemp$,nCount)=0x20)
    {
     nValue=nValue+1;
    }
    ELSE
    nCount=LEN(cTemp$)+3;
   }
   IF(nValue>0)
   {
    cTemp$=RIGHT(cTemp$,LEN(cTemp$)-nValue);
    nValue=nValue-4;
    cElements[nValue]=cTemp$;
    IF(BYTE(cTemp$,LEN(cTemp$))<>0x3A)
    {
      nCount=nValue;
      nCount1=1;
      DO
      {
       cInfo$=cInfo$ + cElements[nCount1];
       nCount=nCount-1;
       nCount1=nCount1+1;
      }
      UNTIL(nCount<=0);   
      XACLIInfo$=cParent$ + " " + cInfo$ + "\n";
    }
   }  
  } 
}


Function ParseCodecInfo()
{
  cTempBuffer$="";
  cTempBuffer$=REMOVE("\x0A",CodecBuffer$);
  IF((FIND("*s ",cTempBuffer$)>0) && nParse=0)
  {
   nparse=1;
   cXACLIInfoBuffer$="";
  }
  IF(nParse=1)
  {
   cXACLIInfoBuffer$=cXACLIInfoBuffer$ + cTempBuffer$;
  } 
  IF(nParse=0)
  {
   CodecInfo$=cTempBuffer$;
  } 
  IF(FIND("*s/end",cTempBuffer$)>0)
  {
   nParse=0;
   CALL FormatInfo();
  }  
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE CodecBuffer$
{
 IF(nBusy=0)
 {
  nBusy=1;
  WHILE(FIND("\x0D\x0A",CodecBuffer$)>0)
  CALL ParseCodecInfo();
  nBusy=0;
 } 
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
   nBusy=0;
   nParse=0;
}


