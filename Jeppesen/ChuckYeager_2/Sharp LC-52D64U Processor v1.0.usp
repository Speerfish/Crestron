/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Sharp LC-52D64U Processor v1.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
   To be used as part of the Sharp LC-52D64U v1.0 module only.  Not to be used as a stand-alone module.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9, KP_Dot, KP_Clear, KP_Enter, Air, Cable;  
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT Number$, To_Device$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER aLoc;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING	sNumber[10], sChannelF[9], sChannelR[9];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH KP0
{
	makestring(sNumber, "%s0", sNumber);
	Number$ = sNumber;
}

PUSH KP1
{
	makestring(sNumber, "%s1", sNumber);
	Number$ = sNumber;
}

PUSH KP2
{
	makestring(sNumber, "%s2", sNumber);
	Number$ = sNumber;
}

PUSH KP3
{
	makestring(sNumber, "%s3", sNumber);
	Number$ = sNumber;
}

PUSH KP4
{
	makestring(sNumber, "%s4", sNumber);
	Number$ = sNumber;
}

PUSH KP5
{
	makestring(sNumber, "%s5", sNumber);
	Number$ = sNumber;
}

PUSH KP6
{
	makestring(sNumber, "%s6", sNumber);
	Number$ = sNumber;
}

PUSH KP7
{
	makestring(sNumber, "%s7", sNumber);
	Number$ = sNumber;
}

PUSH KP8
{
	makestring(sNumber, "%s8", sNumber);
	Number$ = sNumber;
}

PUSH KP9
{
	makestring(sNumber, "%s9", sNumber);
	Number$ = sNumber;
}

PUSH KP_Dot
{
	aLoc = find(".", sNumber);
	if(aLoc = 0)
	{
		makestring(sNumber, "%s.", sNumber);
		Number$ = sNumber;
	}
}

PUSH KP_Clear
{
	clearbuffer(sNumber);
	Number$ = sNumber;
}

PUSH KP_Enter
{
	
	aLoc = find(".", sNumber);
	if(aLoc <> 0)
	{
		if(Air)
		{
			makestring(sChannelF, "%02d", atoi(left(sNumber, aLoc - 1)));
			makestring(sChannelR, "%02d", atoi(right(sNumber, len(sNumber) - aLoc)));
			makestring(To_Device$, "DA2P%s%s\r", sChannelF, sChannelR);
		}
		else if(Cable)
		{
			makestring(sChannelF, "%03d", atoi(left(sNumber, aLoc - 1)));
			makestring(sChannelR, "%03d", atoi(right(sNumber, len(sNumber) - aLoc)));
			makestring(To_Device$, "DC2U%s \rDC2L%s \r", sChannelF, sChannelR);
		}
   }
	else
	{
		if(Air)
		{
			makestring(sChannelF, "%02d", atoi(sNumber));
			makestring(To_Device$, "DCCH%s  \r", sChannelF);
		}
		else if(Cable)
		{
			makestring(sChannelF, "%03d", atoi(sNumber));
			makestring(To_Device$, "DCCH%s \r", sChannelF);
		}
	}	
	clearbuffer(sNumber);
	Number$ = sNumber;

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	clearbuffer(sNumber);
}


